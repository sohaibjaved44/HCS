//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using HCS.Properties;

#pragma warning disable 1591

namespace HCS.datasets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [Serializable()]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [XmlSchemaProvider("GetTypedDataSetSchema")]
    [XmlRoot("purchaseproduct")]
    [HelpKeyword("vs.data.DataSet")]
    public partial class purchaseproduct : DataSet {
        
        private purchaseproductDataTable tablepurchaseproduct;
        
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public purchaseproduct() {
            this.BeginInit();
            this.InitClass();
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected purchaseproduct(SerializationInfo info, StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                CollectionChangeEventHandler schemaChangedHandler1 = new CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["purchaseproduct"] != null)) {
                    base.Tables.Add(new purchaseproductDataTable(ds.Tables["purchaseproduct"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public purchaseproductDataTable _purchaseproduct {
            get {
                return this.tablepurchaseproduct;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override DataSet Clone() {
            purchaseproduct cln = ((purchaseproduct)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                DataSet ds = new DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["purchaseproduct"] != null)) {
                    base.Tables.Add(new purchaseproductDataTable(ds.Tables["purchaseproduct"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override XmlSchema GetSchemaSerializable() {
            MemoryStream stream = new MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablepurchaseproduct = ((purchaseproductDataTable)(base.Tables["purchaseproduct"]));
            if ((initTable == true)) {
                if ((this.tablepurchaseproduct != null)) {
                    this.tablepurchaseproduct.InitVars();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "purchaseproduct";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/purchaseproduct.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            this.tablepurchaseproduct = new purchaseproductDataTable();
            base.Tables.Add(this.tablepurchaseproduct);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerialize_purchaseproduct() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e) {
            if ((e.Action == CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs) {
            purchaseproduct ds = new purchaseproduct();
            XmlSchemaComplexType type = new XmlSchemaComplexType();
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaAny any = new XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                MemoryStream s1 = new MemoryStream();
                MemoryStream s2 = new MemoryStream();
                try {
                    XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void purchaseproductRowChangeEventHandler(object sender, purchaseproductRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class purchaseproductDataTable : TypedTableBase<purchaseproductRow> {
            
            private DataColumn columnseqid;
            
            private DataColumn columnproductid;
            
            private DataColumn columndate;
            
            private DataColumn columnseller_cde;
            
            private DataColumn columnsellerid;
            
            private DataColumn columnsellername;
            
            private DataColumn columnnoofbags;
            
            private DataColumn columnrate;
            
            private DataColumn columnbagweight;
            
            private DataColumn columnextraweight;
            
            private DataColumn columncommission;
            
            private DataColumn columnlabour;
            
            private DataColumn columnpurchaserid;
            
            private DataColumn columncommissionamt;
            
            private DataColumn columnprice;
            
            private DataColumn columnpayableprice;
            
            private DataColumn columnproductname;
            
            private DataColumn columntotalpayable;
            
            private DataColumn columnamoutpaid;
            
            private DataColumn columnpurchasername;
            
            private DataColumn columntotalreceivable;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public purchaseproductDataTable() {
                this.TableName = "purchaseproduct";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal purchaseproductDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected purchaseproductDataTable(SerializationInfo info, StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn seqidColumn {
                get {
                    return this.columnseqid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn productidColumn {
                get {
                    return this.columnproductid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn seller_cdeColumn {
                get {
                    return this.columnseller_cde;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn selleridColumn {
                get {
                    return this.columnsellerid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn sellernameColumn {
                get {
                    return this.columnsellername;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn noofbagsColumn {
                get {
                    return this.columnnoofbags;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn rateColumn {
                get {
                    return this.columnrate;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn bagweightColumn {
                get {
                    return this.columnbagweight;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn extraweightColumn {
                get {
                    return this.columnextraweight;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn commissionColumn {
                get {
                    return this.columncommission;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn labourColumn {
                get {
                    return this.columnlabour;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn purchaseridColumn {
                get {
                    return this.columnpurchaserid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn commissionamtColumn {
                get {
                    return this.columncommissionamt;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn payablepriceColumn {
                get {
                    return this.columnpayableprice;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn productnameColumn {
                get {
                    return this.columnproductname;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn totalpayableColumn {
                get {
                    return this.columntotalpayable;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn amoutpaidColumn {
                get {
                    return this.columnamoutpaid;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn purchasernameColumn {
                get {
                    return this.columnpurchasername;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn totalreceivableColumn {
                get {
                    return this.columntotalreceivable;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public purchaseproductRow this[int index] {
                get {
                    return ((purchaseproductRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event purchaseproductRowChangeEventHandler purchaseproductRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event purchaseproductRowChangeEventHandler purchaseproductRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event purchaseproductRowChangeEventHandler purchaseproductRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event purchaseproductRowChangeEventHandler purchaseproductRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddpurchaseproductRow(purchaseproductRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public purchaseproductRow AddpurchaseproductRow(
                        int productid, 
                        DateTime date, 
                        string seller_cde, 
                        int sellerid, 
                        string sellername, 
                        int noofbags, 
                        decimal rate, 
                        decimal bagweight, 
                        decimal extraweight, 
                        decimal commission, 
                        decimal labour, 
                        int purchaserid, 
                        decimal commissionamt, 
                        decimal price, 
                        decimal payableprice, 
                        string productname, 
                        decimal totalpayable, 
                        decimal amoutpaid, 
                        string purchasername, 
                        decimal totalreceivable) {
                purchaseproductRow rowpurchaseproductRow = ((purchaseproductRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        productid,
                        date,
                        seller_cde,
                        sellerid,
                        sellername,
                        noofbags,
                        rate,
                        bagweight,
                        extraweight,
                        commission,
                        labour,
                        purchaserid,
                        commissionamt,
                        price,
                        payableprice,
                        productname,
                        totalpayable,
                        amoutpaid,
                        purchasername,
                        totalreceivable};
                rowpurchaseproductRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpurchaseproductRow);
                return rowpurchaseproductRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public purchaseproductRow FindByseqid(int seqid) {
                return ((purchaseproductRow)(this.Rows.Find(new object[] {
                            seqid})));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                purchaseproductDataTable cln = ((purchaseproductDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new purchaseproductDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnseqid = base.Columns["seqid"];
                this.columnproductid = base.Columns["productid"];
                this.columndate = base.Columns["date"];
                this.columnseller_cde = base.Columns["seller_cde"];
                this.columnsellerid = base.Columns["sellerid"];
                this.columnsellername = base.Columns["sellername"];
                this.columnnoofbags = base.Columns["noofbags"];
                this.columnrate = base.Columns["rate"];
                this.columnbagweight = base.Columns["bagweight"];
                this.columnextraweight = base.Columns["extraweight"];
                this.columncommission = base.Columns["commission"];
                this.columnlabour = base.Columns["labour"];
                this.columnpurchaserid = base.Columns["purchaserid"];
                this.columncommissionamt = base.Columns["commissionamt"];
                this.columnprice = base.Columns["price"];
                this.columnpayableprice = base.Columns["payableprice"];
                this.columnproductname = base.Columns["productname"];
                this.columntotalpayable = base.Columns["totalpayable"];
                this.columnamoutpaid = base.Columns["amoutpaid"];
                this.columnpurchasername = base.Columns["purchasername"];
                this.columntotalreceivable = base.Columns["totalreceivable"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnseqid = new DataColumn("seqid", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnseqid);
                this.columnproductid = new DataColumn("productid", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnproductid);
                this.columndate = new DataColumn("date", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnseller_cde = new DataColumn("seller_cde", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnseller_cde);
                this.columnsellerid = new DataColumn("sellerid", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnsellerid);
                this.columnsellername = new DataColumn("sellername", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnsellername);
                this.columnnoofbags = new DataColumn("noofbags", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnnoofbags);
                this.columnrate = new DataColumn("rate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnrate);
                this.columnbagweight = new DataColumn("bagweight", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnbagweight);
                this.columnextraweight = new DataColumn("extraweight", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnextraweight);
                this.columncommission = new DataColumn("commission", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columncommission);
                this.columnlabour = new DataColumn("labour", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnlabour);
                this.columnpurchaserid = new DataColumn("purchaserid", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnpurchaserid);
                this.columncommissionamt = new DataColumn("commissionamt", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columncommissionamt);
                this.columnprice = new DataColumn("price", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.columnpayableprice = new DataColumn("payableprice", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnpayableprice);
                this.columnproductname = new DataColumn("productname", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnproductname);
                this.columntotalpayable = new DataColumn("totalpayable", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columntotalpayable);
                this.columnamoutpaid = new DataColumn("amoutpaid", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnamoutpaid);
                this.columnpurchasername = new DataColumn("purchasername", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnpurchasername);
                this.columntotalreceivable = new DataColumn("totalreceivable", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columntotalreceivable);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnseqid}, true));
                this.columnseqid.AutoIncrement = true;
                this.columnseqid.AutoIncrementSeed = -1;
                this.columnseqid.AutoIncrementStep = -1;
                this.columnseqid.AllowDBNull = false;
                this.columnseqid.ReadOnly = true;
                this.columnseqid.Unique = true;
                this.columnproductid.AllowDBNull = false;
                this.columndate.AllowDBNull = false;
                this.columnseller_cde.AllowDBNull = false;
                this.columnseller_cde.MaxLength = 5;
                this.columnsellerid.AllowDBNull = false;
                this.columnsellername.MaxLength = 30;
                this.columnnoofbags.AllowDBNull = false;
                this.columnrate.AllowDBNull = false;
                this.columnbagweight.AllowDBNull = false;
                this.columnextraweight.AllowDBNull = false;
                this.columncommission.AllowDBNull = false;
                this.columnlabour.AllowDBNull = false;
                this.columnpurchaserid.AllowDBNull = false;
                this.columncommissionamt.AllowDBNull = false;
                this.columnprice.AllowDBNull = false;
                this.columnpayableprice.AllowDBNull = false;
                this.columnproductname.MaxLength = 30;
                this.columntotalpayable.AllowDBNull = false;
                this.columnamoutpaid.AllowDBNull = false;
                this.columnpurchasername.MaxLength = 50;
                this.columntotalreceivable.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_TablePropName", "_purchaseproduct");
                this.ExtendedProperties.Add("Generator_UserTableName", "purchaseproduct");
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public purchaseproductRow NewpurchaseproductRow() {
                return ((purchaseproductRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new purchaseproductRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(purchaseproductRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.purchaseproductRowChanged != null)) {
                    this.purchaseproductRowChanged(this, new purchaseproductRowChangeEvent(((purchaseproductRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.purchaseproductRowChanging != null)) {
                    this.purchaseproductRowChanging(this, new purchaseproductRowChangeEvent(((purchaseproductRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.purchaseproductRowDeleted != null)) {
                    this.purchaseproductRowDeleted(this, new purchaseproductRowChangeEvent(((purchaseproductRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.purchaseproductRowDeleting != null)) {
                    this.purchaseproductRowDeleting(this, new purchaseproductRowChangeEvent(((purchaseproductRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovepurchaseproductRow(purchaseproductRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                purchaseproduct ds = new purchaseproduct();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "purchaseproductDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class purchaseproductRow : DataRow {
            
            private purchaseproductDataTable tablepurchaseproduct;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal purchaseproductRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablepurchaseproduct = ((purchaseproductDataTable)(this.Table));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int seqid {
                get {
                    return ((int)(this[this.tablepurchaseproduct.seqidColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.seqidColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int productid {
                get {
                    return ((int)(this[this.tablepurchaseproduct.productidColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.productidColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime date {
                get {
                    return ((DateTime)(this[this.tablepurchaseproduct.dateColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.dateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string seller_cde {
                get {
                    return ((string)(this[this.tablepurchaseproduct.seller_cdeColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.seller_cdeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int sellerid {
                get {
                    return ((int)(this[this.tablepurchaseproduct.selleridColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.selleridColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string sellername {
                get {
                    try {
                        return ((string)(this[this.tablepurchaseproduct.sellernameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'sellername\' in table \'purchaseproduct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepurchaseproduct.sellernameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int noofbags {
                get {
                    return ((int)(this[this.tablepurchaseproduct.noofbagsColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.noofbagsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal rate {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.rateColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.rateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal bagweight {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.bagweightColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.bagweightColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal extraweight {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.extraweightColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.extraweightColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal commission {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.commissionColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.commissionColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal labour {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.labourColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.labourColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int purchaserid {
                get {
                    return ((int)(this[this.tablepurchaseproduct.purchaseridColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.purchaseridColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal commissionamt {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.commissionamtColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.commissionamtColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal price {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.priceColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.priceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal payableprice {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.payablepriceColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.payablepriceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string productname {
                get {
                    try {
                        return ((string)(this[this.tablepurchaseproduct.productnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'productname\' in table \'purchaseproduct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepurchaseproduct.productnameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal totalpayable {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.totalpayableColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.totalpayableColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal amoutpaid {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.amoutpaidColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.amoutpaidColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string purchasername {
                get {
                    try {
                        return ((string)(this[this.tablepurchaseproduct.purchasernameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("The value for column \'purchasername\' in table \'purchaseproduct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepurchaseproduct.purchasernameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal totalreceivable {
                get {
                    return ((decimal)(this[this.tablepurchaseproduct.totalreceivableColumn]));
                }
                set {
                    this[this.tablepurchaseproduct.totalreceivableColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IssellernameNull() {
                return this.IsNull(this.tablepurchaseproduct.sellernameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetsellernameNull() {
                this[this.tablepurchaseproduct.sellernameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsproductnameNull() {
                return this.IsNull(this.tablepurchaseproduct.productnameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetproductnameNull() {
                this[this.tablepurchaseproduct.productnameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IspurchasernameNull() {
                return this.IsNull(this.tablepurchaseproduct.purchasernameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetpurchasernameNull() {
                this[this.tablepurchaseproduct.purchasernameColumn] = Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class purchaseproductRowChangeEvent : EventArgs {
            
            private purchaseproductRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public purchaseproductRowChangeEvent(purchaseproductRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public purchaseproductRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace HCS.datasets.purchaseproductTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [DataObject(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapter")]
    public partial class purchaseproductTableAdapter : Component {
        
        private SqlDataAdapter _adapter;
        
        private SqlConnection _connection;
        
        private SqlTransaction _transaction;
        
        private SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public purchaseproductTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new SqlDataAdapter();
            DataTableMapping tableMapping = new DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "purchaseproduct";
            tableMapping.ColumnMappings.Add("seqid", "seqid");
            tableMapping.ColumnMappings.Add("productid", "productid");
            tableMapping.ColumnMappings.Add("date", "date");
            tableMapping.ColumnMappings.Add("seller_cde", "seller_cde");
            tableMapping.ColumnMappings.Add("sellerid", "sellerid");
            tableMapping.ColumnMappings.Add("sellername", "sellername");
            tableMapping.ColumnMappings.Add("noofbags", "noofbags");
            tableMapping.ColumnMappings.Add("rate", "rate");
            tableMapping.ColumnMappings.Add("bagweight", "bagweight");
            tableMapping.ColumnMappings.Add("extraweight", "extraweight");
            tableMapping.ColumnMappings.Add("commission", "commission");
            tableMapping.ColumnMappings.Add("labour", "labour");
            tableMapping.ColumnMappings.Add("purchaserid", "purchaserid");
            tableMapping.ColumnMappings.Add("commissionamt", "commissionamt");
            tableMapping.ColumnMappings.Add("price", "price");
            tableMapping.ColumnMappings.Add("payableprice", "payableprice");
            tableMapping.ColumnMappings.Add("productname", "productname");
            tableMapping.ColumnMappings.Add("totalpayable", "totalpayable");
            tableMapping.ColumnMappings.Add("amoutpaid", "amoutpaid");
            tableMapping.ColumnMappings.Add("purchasername", "purchasername");
            tableMapping.ColumnMappings.Add("totalreceivable", "totalreceivable");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[purchaseproduct] WHERE (([seqid] = @Original_seqid) AND ([productid] = @Original_productid) AND ([date] = @Original_date) AND ([seller_cde] = @Original_seller_cde) AND ([sellerid] = @Original_sellerid) AND ((@IsNull_sellername = 1 AND [sellername] IS NULL) OR ([sellername] = @Original_sellername)) AND ([noofbags] = @Original_noofbags) AND ([rate] = @Original_rate) AND ([bagweight] = @Original_bagweight) AND ([extraweight] = @Original_extraweight) AND ([commission] = @Original_commission) AND ([labour] = @Original_labour) AND ([purchaserid] = @Original_purchaserid) AND ([commissionamt] = @Original_commissionamt) AND ([price] = @Original_price) AND ([payableprice] = @Original_payableprice) AND ((@IsNull_productname = 1 AND [productname] IS NULL) OR ([productname] = @Original_productname)) AND ([totalpayable] = @Original_totalpayable) AND ([amoutpaid] = @Original_amoutpaid) AND ((@IsNull_purchasername = 1 AND [purchasername] IS NULL) OR ([purchasername] = @Original_purchasername)) AND ([totalreceivable] = @Original_totalreceivable))";
            this._adapter.DeleteCommand.CommandType = CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_seqid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "seqid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_productid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "productid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "date", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_seller_cde", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "seller_cde", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_sellerid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "sellerid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@IsNull_sellername", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "sellername", DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_sellername", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "sellername", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_noofbags", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "noofbags", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_rate", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "rate", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_bagweight", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "bagweight", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_extraweight", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "extraweight", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_commission", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "commission", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_labour", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "labour", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_purchaserid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "purchaserid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_commissionamt", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "commissionamt", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_price", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "price", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_payableprice", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "payableprice", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@IsNull_productname", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "productname", DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_productname", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "productname", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_totalpayable", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "totalpayable", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_amoutpaid", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "amoutpaid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@IsNull_purchasername", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "purchasername", DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_purchasername", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "purchasername", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@Original_totalreceivable", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "totalreceivable", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[purchaseproduct] ([productid], [date], [seller_cde], [sellerid], [sellername], [noofbags], [rate], [bagweight], [extraweight], [commission], [labour], [purchaserid], [commissionamt], [price], [payableprice], [productname], [totalpayable], [amoutpaid], [purchasername], [totalreceivable]) VALUES (@productid, @date, @seller_cde, @sellerid, @sellername, @noofbags, @rate, @bagweight, @extraweight, @commission, @labour, @purchaserid, @commissionamt, @price, @payableprice, @productname, @totalpayable, @amoutpaid, @purchasername, @totalreceivable);
SELECT seqid, productid, date, seller_cde, sellerid, sellername, noofbags, rate, bagweight, extraweight, commission, labour, purchaserid, commissionamt, price, payableprice, productname, totalpayable, amoutpaid, purchasername, totalreceivable FROM purchaseproduct WHERE (seqid = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "productid", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "date", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@seller_cde", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "seller_cde", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@sellerid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "sellerid", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@sellername", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "sellername", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@noofbags", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "noofbags", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@rate", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "rate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@bagweight", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "bagweight", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@extraweight", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "extraweight", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@commission", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "commission", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@labour", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "labour", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@purchaserid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "purchaserid", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@commissionamt", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "commissionamt", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@price", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "price", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@payableprice", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "payableprice", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@productname", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "productname", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@totalpayable", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "totalpayable", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@amoutpaid", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "amoutpaid", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@purchasername", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "purchasername", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@totalreceivable", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "totalreceivable", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[purchaseproduct] SET [productid] = @productid, [date] = @date, [sel" +
                "ler_cde] = @seller_cde, [sellerid] = @sellerid, [sellername] = @sellername, [noo" +
                "fbags] = @noofbags, [rate] = @rate, [bagweight] = @bagweight, [extraweight] = @e" +
                "xtraweight, [commission] = @commission, [labour] = @labour, [purchaserid] = @pur" +
                "chaserid, [commissionamt] = @commissionamt, [price] = @price, [payableprice] = @" +
                "payableprice, [productname] = @productname, [totalpayable] = @totalpayable, [amo" +
                "utpaid] = @amoutpaid, [purchasername] = @purchasername, [totalreceivable] = @tot" +
                "alreceivable WHERE (([seqid] = @Original_seqid) AND ([productid] = @Original_pro" +
                "ductid) AND ([date] = @Original_date) AND ([seller_cde] = @Original_seller_cde) " +
                "AND ([sellerid] = @Original_sellerid) AND ((@IsNull_sellername = 1 AND [sellerna" +
                "me] IS NULL) OR ([sellername] = @Original_sellername)) AND ([noofbags] = @Origin" +
                "al_noofbags) AND ([rate] = @Original_rate) AND ([bagweight] = @Original_bagweigh" +
                "t) AND ([extraweight] = @Original_extraweight) AND ([commission] = @Original_com" +
                "mission) AND ([labour] = @Original_labour) AND ([purchaserid] = @Original_purcha" +
                "serid) AND ([commissionamt] = @Original_commissionamt) AND ([price] = @Original_" +
                "price) AND ([payableprice] = @Original_payableprice) AND ((@IsNull_productname =" +
                " 1 AND [productname] IS NULL) OR ([productname] = @Original_productname)) AND ([" +
                "totalpayable] = @Original_totalpayable) AND ([amoutpaid] = @Original_amoutpaid) " +
                "AND ((@IsNull_purchasername = 1 AND [purchasername] IS NULL) OR ([purchasername]" +
                " = @Original_purchasername)) AND ([totalreceivable] = @Original_totalreceivable)" +
                ");\r\nSELECT seqid, productid, date, seller_cde, sellerid, sellername, noofbags, r" +
                "ate, bagweight, extraweight, commission, labour, purchaserid, commissionamt, pri" +
                "ce, payableprice, productname, totalpayable, amoutpaid, purchasername, totalrece" +
                "ivable FROM purchaseproduct WHERE (seqid = @seqid)";
            this._adapter.UpdateCommand.CommandType = CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@productid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "productid", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "date", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@seller_cde", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "seller_cde", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@sellerid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "sellerid", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@sellername", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "sellername", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@noofbags", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "noofbags", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@rate", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "rate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@bagweight", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "bagweight", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@extraweight", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "extraweight", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@commission", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "commission", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@labour", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "labour", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@purchaserid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "purchaserid", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@commissionamt", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "commissionamt", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@price", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "price", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@payableprice", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "payableprice", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@productname", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "productname", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@totalpayable", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "totalpayable", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@amoutpaid", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "amoutpaid", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@purchasername", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "purchasername", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@totalreceivable", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "totalreceivable", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_seqid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "seqid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_productid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "productid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "date", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_seller_cde", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "seller_cde", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_sellerid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "sellerid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@IsNull_sellername", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "sellername", DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_sellername", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "sellername", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_noofbags", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "noofbags", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_rate", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "rate", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_bagweight", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "bagweight", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_extraweight", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "extraweight", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_commission", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "commission", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_labour", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "labour", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_purchaserid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "purchaserid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_commissionamt", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "commissionamt", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_price", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "price", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_payableprice", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "payableprice", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@IsNull_productname", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "productname", DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_productname", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "productname", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_totalpayable", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "totalpayable", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_amoutpaid", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "amoutpaid", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@IsNull_purchasername", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "purchasername", DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_purchasername", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "purchasername", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Original_totalreceivable", SqlDbType.Decimal, 0, ParameterDirection.Input, 18, 2, "totalreceivable", DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@seqid", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "seqid", DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = Settings.Default.HCSTESTConnectionString;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new SqlCommand[1];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT seqid, productid, date, seller_cde, sellerid, sellername, noofbags, rate, bagweight, extraweight, commission, labour, purchaserid, commissionamt, price, payableprice, productname, totalpayable, amoutpaid, purchasername, totalreceivable FROM dbo.purchaseproduct";
            this._commandCollection[0].CommandType = CommandType.Text;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(purchaseproduct.purchaseproductDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public virtual purchaseproduct.purchaseproductDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            purchaseproduct.purchaseproductDataTable dataTable = new purchaseproduct.purchaseproductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(purchaseproduct.purchaseproductDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(purchaseproduct dataSet) {
            return this.Adapter.Update(dataSet, "purchaseproduct");
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow dataRow) {
            return this.Adapter.Update(new DataRow[] {
                        dataRow});
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_seqid, 
                    int Original_productid, 
                    DateTime Original_date, 
                    string Original_seller_cde, 
                    int Original_sellerid, 
                    string Original_sellername, 
                    int Original_noofbags, 
                    decimal Original_rate, 
                    decimal Original_bagweight, 
                    decimal Original_extraweight, 
                    decimal Original_commission, 
                    decimal Original_labour, 
                    int Original_purchaserid, 
                    decimal Original_commissionamt, 
                    decimal Original_price, 
                    decimal Original_payableprice, 
                    string Original_productname, 
                    decimal Original_totalpayable, 
                    decimal Original_amoutpaid, 
                    string Original_purchasername, 
                    decimal Original_totalreceivable) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_seqid));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_productid));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((DateTime)(Original_date));
            if ((Original_seller_cde == null)) {
                throw new ArgumentNullException("Original_seller_cde");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_seller_cde));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_sellerid));
            if ((Original_sellername == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_sellername));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_noofbags));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_rate));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_bagweight));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_extraweight));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_commission));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_labour));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_purchaserid));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_commissionamt));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_price));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_payableprice));
            if ((Original_productname == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_productname));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((decimal)(Original_totalpayable));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((decimal)(Original_amoutpaid));
            if ((Original_purchasername == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_purchasername));
            }
            this.Adapter.DeleteCommand.Parameters[23].Value = ((decimal)(Original_totalreceivable));
            ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int productid, 
                    DateTime date, 
                    string seller_cde, 
                    int sellerid, 
                    string sellername, 
                    int noofbags, 
                    decimal rate, 
                    decimal bagweight, 
                    decimal extraweight, 
                    decimal commission, 
                    decimal labour, 
                    int purchaserid, 
                    decimal commissionamt, 
                    decimal price, 
                    decimal payableprice, 
                    string productname, 
                    decimal totalpayable, 
                    decimal amoutpaid, 
                    string purchasername, 
                    decimal totalreceivable) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(productid));
            this.Adapter.InsertCommand.Parameters[1].Value = ((DateTime)(date));
            if ((seller_cde == null)) {
                throw new ArgumentNullException("seller_cde");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(seller_cde));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(sellerid));
            if ((sellername == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(sellername));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(noofbags));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(rate));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(bagweight));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(extraweight));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(commission));
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(labour));
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(purchaserid));
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(commissionamt));
            this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(price));
            this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(payableprice));
            if ((productname == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(productname));
            }
            this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(totalpayable));
            this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(amoutpaid));
            if ((purchasername == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(purchasername));
            }
            this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(totalreceivable));
            ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int productid, 
                    DateTime date, 
                    string seller_cde, 
                    int sellerid, 
                    string sellername, 
                    int noofbags, 
                    decimal rate, 
                    decimal bagweight, 
                    decimal extraweight, 
                    decimal commission, 
                    decimal labour, 
                    int purchaserid, 
                    decimal commissionamt, 
                    decimal price, 
                    decimal payableprice, 
                    string productname, 
                    decimal totalpayable, 
                    decimal amoutpaid, 
                    string purchasername, 
                    decimal totalreceivable, 
                    int Original_seqid, 
                    int Original_productid, 
                    DateTime Original_date, 
                    string Original_seller_cde, 
                    int Original_sellerid, 
                    string Original_sellername, 
                    int Original_noofbags, 
                    decimal Original_rate, 
                    decimal Original_bagweight, 
                    decimal Original_extraweight, 
                    decimal Original_commission, 
                    decimal Original_labour, 
                    int Original_purchaserid, 
                    decimal Original_commissionamt, 
                    decimal Original_price, 
                    decimal Original_payableprice, 
                    string Original_productname, 
                    decimal Original_totalpayable, 
                    decimal Original_amoutpaid, 
                    string Original_purchasername, 
                    decimal Original_totalreceivable, 
                    int seqid) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(productid));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((DateTime)(date));
            if ((seller_cde == null)) {
                throw new ArgumentNullException("seller_cde");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(seller_cde));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(sellerid));
            if ((sellername == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(sellername));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(noofbags));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(rate));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(bagweight));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(extraweight));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(commission));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(labour));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(purchaserid));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(commissionamt));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(price));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(payableprice));
            if ((productname == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(productname));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(totalpayable));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(amoutpaid));
            if ((purchasername == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(purchasername));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(totalreceivable));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_seqid));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_productid));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((DateTime)(Original_date));
            if ((Original_seller_cde == null)) {
                throw new ArgumentNullException("Original_seller_cde");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_seller_cde));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_sellerid));
            if ((Original_sellername == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_sellername));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_noofbags));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(Original_rate));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_bagweight));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(Original_extraweight));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(Original_commission));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(Original_labour));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_purchaserid));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(Original_commissionamt));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_price));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(Original_payableprice));
            if ((Original_productname == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_productname));
            }
            this.Adapter.UpdateCommand.Parameters[39].Value = ((decimal)(Original_totalpayable));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(Original_amoutpaid));
            if ((Original_purchasername == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_purchasername));
            }
            this.Adapter.UpdateCommand.Parameters[43].Value = ((decimal)(Original_totalreceivable));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(seqid));
            ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) 
                        != ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int productid, 
                    DateTime date, 
                    string seller_cde, 
                    int sellerid, 
                    string sellername, 
                    int noofbags, 
                    decimal rate, 
                    decimal bagweight, 
                    decimal extraweight, 
                    decimal commission, 
                    decimal labour, 
                    int purchaserid, 
                    decimal commissionamt, 
                    decimal price, 
                    decimal payableprice, 
                    string productname, 
                    decimal totalpayable, 
                    decimal amoutpaid, 
                    string purchasername, 
                    decimal totalreceivable, 
                    int Original_seqid, 
                    int Original_productid, 
                    DateTime Original_date, 
                    string Original_seller_cde, 
                    int Original_sellerid, 
                    string Original_sellername, 
                    int Original_noofbags, 
                    decimal Original_rate, 
                    decimal Original_bagweight, 
                    decimal Original_extraweight, 
                    decimal Original_commission, 
                    decimal Original_labour, 
                    int Original_purchaserid, 
                    decimal Original_commissionamt, 
                    decimal Original_price, 
                    decimal Original_payableprice, 
                    string Original_productname, 
                    decimal Original_totalpayable, 
                    decimal Original_amoutpaid, 
                    string Original_purchasername, 
                    decimal Original_totalreceivable) {
            return this.Update(productid, date, seller_cde, sellerid, sellername, noofbags, rate, bagweight, extraweight, commission, labour, purchaserid, commissionamt, price, payableprice, productname, totalpayable, amoutpaid, purchasername, totalreceivable, Original_seqid, Original_productid, Original_date, Original_seller_cde, Original_sellerid, Original_sellername, Original_noofbags, Original_rate, Original_bagweight, Original_extraweight, Original_commission, Original_labour, Original_purchaserid, Original_commissionamt, Original_price, Original_payableprice, Original_productname, Original_totalpayable, Original_amoutpaid, Original_purchasername, Original_totalreceivable, Original_seqid);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : Component {
        
        private UpdateOrderOption _updateOrder;
        
        private purchaseproductTableAdapter _purchaseproductTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private IDbConnection _connection;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public purchaseproductTableAdapter purchaseproductTableAdapter {
            get {
                return this._purchaseproductTableAdapter;
            }
            set {
                this._purchaseproductTableAdapter = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        public IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._purchaseproductTableAdapter != null) 
                            && (this._purchaseproductTableAdapter.Connection != null))) {
                    return this._purchaseproductTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._purchaseproductTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(purchaseproduct dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows) {
            int result = 0;
            if ((this._purchaseproductTableAdapter != null)) {
                DataRow[] updatedRows = dataSet._purchaseproduct.Select(null, null, DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._purchaseproductTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(purchaseproduct dataSet, List<DataRow> allAddedRows) {
            int result = 0;
            if ((this._purchaseproductTableAdapter != null)) {
                DataRow[] addedRows = dataSet._purchaseproduct.Select(null, null, DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._purchaseproductTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(purchaseproduct dataSet, List<DataRow> allChangedRows) {
            int result = 0;
            if ((this._purchaseproductTableAdapter != null)) {
                DataRow[] deletedRows = dataSet._purchaseproduct.Select(null, null, DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._purchaseproductTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            List<DataRow> realUpdatedRows = new List<DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(purchaseproduct dataSet) {
            if ((dataSet == null)) {
                throw new ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._purchaseproductTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._purchaseproductTableAdapter.Connection) == false))) {
                throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & ConnectionState.Broken) 
                        == ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            List<DataRow> allChangedRows = new List<DataRow>();
            List<DataRow> allAddedRows = new List<DataRow>();
            List<DataAdapter> adaptersWithAcceptChangesDuringUpdate = new List<DataAdapter>();
            Dictionary<object, IDbConnection> revertConnections = new Dictionary<object, IDbConnection>();
            int result = 0;
            DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._purchaseproductTableAdapter != null)) {
                    revertConnections.Add(this._purchaseproductTableAdapter, this._purchaseproductTableAdapter.Connection);
                    this._purchaseproductTableAdapter.Connection = ((SqlConnection)(workConnection));
                    this._purchaseproductTableAdapter.Transaction = ((SqlTransaction)(workTransaction));
                    if (this._purchaseproductTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._purchaseproductTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._purchaseproductTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    DataRow[] rows = new DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    DataRow[] rows = new DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        DataRow[] rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._purchaseproductTableAdapter != null)) {
                    this._purchaseproductTableAdapter.Connection = ((SqlConnection)(revertConnections[this._purchaseproductTableAdapter]));
                    this._purchaseproductTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    DataAdapter[] adapters = new DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst) {
            Array.Sort<DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, IComparer<DataRow> {
            
            private DataRelation _relation;
            
            private int _childFirst;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private DataRow GetRoot(DataRow row, out int distance) {
                Debug.Assert((row != null));
                DataRow root = row;
                distance = 0;

                IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                traversedRows[row] = row;

                DataRow parent = row.GetParentRow(this._relation, DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(DataRow row1, DataRow row2) {
                if (ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                DataRow root2 = this.GetRoot(row2, out distance2);

                if (ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591